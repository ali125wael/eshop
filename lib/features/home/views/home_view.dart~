import 'package:ecommerce_shop/core/utils/app_assets.dart';
import 'package:ecommerce_shop/core/utils/app_colors.dart';
import 'package:ecommerce_shop/core/utils/app_text_styles.dart';
import 'package:ecommerce_shop/core/widgets/custom_promo_slider.dart';
import 'package:ecommerce_shop/core/widgets/custom_search_bar.dart';
import 'package:ecommerce_shop/core/widgets/Custom_app_bar.dart';
import 'package:ecommerce_shop/core/widgets/custom_categories_section.dart';
import 'package:ecommerce_shop/core/helper/my_navigator.dart';
import 'package:ecommerce_shop/features/shoping_cart/views/cart_view.dart';
import 'package:ecommerce_shop/features/shoping_cart/views/shoping_view.dart';
import 'package:ecommerce_shop/features/profile/view/profile_view.dart';
import 'package:ecommerce_shop/features/get_product/data/repo/get_product_repo.dart';
import 'package:ecommerce_shop/features/get_product/manager/get_product_cubit/get_product_cubit.dart';
import 'package:ecommerce_shop/features/get_product/manager/get_product_cubit/get_product_state.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_svg/flutter_svg.dart';

class HomeScreenBodyContent extends StatelessWidget {
  const HomeScreenBodyContent({super.key});

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(8.0),
      child: Column(
        children: [
          const CustomAppBar(),
          const CustomSearchBar(),
          const SizedBox(height: 20),
          Padding(
            padding: const EdgeInsets.only(left: 24),
            child: Align(
              alignment: Alignment.centerLeft,
              child: Text('All Featured', style: AppTextStyle.allFeathureStyle),
            ),
          ),
          const SizedBox(height: 20),
          CustomCategoriesSection(),
          const SizedBox(height: 20),
          const CustomPromoSlider(),
          const SizedBox(height: 20),
          Align(
            alignment: Alignment.centerLeft,
            child: Text(
              'Recommended',
              style: const TextStyle(
                fontFamily: 'Montserrat',
                fontWeight: FontWeight.w600,
                fontSize: 18,
                height: 22 / 18,
                letterSpacing: 0,
                color: Colors.black,
              ),
              textAlign: TextAlign.center,
            ),
          ),
          const SizedBox(height: 20),
          BlocConsumer<GetProductsCubit, GetProductsState>(
            listener: (context, state) {
              if (state is GetProductsError) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text("Error: ${state.error}"),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            builder: (context, state) {
              if (state is GetProductsLoading) {
                return const Center(child: CircularProgressIndicator());
              } else if (state is GetProductsSuccess) {
                final products = state.products;

                // طباعة لتتبع المشكلة
                print('Products length: ${products.length}');
                print('Products data: $products');

                if (products.isEmpty) {
                  return const Center(child: Text("No products found"));
                }

                // تحقق من صحة تنسيق البيانات
                bool hasExpectedKeys = products.every(
                  (product) =>
                      product.containsKey('name') &&
                      product.containsKey('price'),
                );

                if (!hasExpectedKeys) {
                  return Center(
                    child: Text(
                      "Data format error: Some products are missing expected fields.",
                      style: const TextStyle(color: Colors.red),
                      textAlign: TextAlign.center,
                    ),
                  );
                }

                return ListView.builder(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  itemCount: products.length,
                  itemBuilder: (context, index) {
                    final product = products[index];
                    return ListTile(
                      leading:
                          product['image_url'] != null
                              ? Image.network(
                                product['image_url'],
                                width: 60,
                                height: 60,
                                fit: BoxFit.cover,
                              )
                              : null,
                      title: Text(product['name'] ?? ''),
                      subtitle: Text('Price: \$${product['price'] ?? ''}'),
                    );
                  },
                );
              } else if (state is GetProductsError) {
                return Center(
                  child: Text(
                    "Error occurred: ${state.error}",
                    style: const TextStyle(color: Colors.red),
                  ),
                );
              } else {
                return const SizedBox();
              }
            },
          ),
        ],
      ),
    );
  }
}
